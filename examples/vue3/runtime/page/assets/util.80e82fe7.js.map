{"version":3,"file":"util.80e82fe7.js","sources":["../../../../../../packages/ui/src/util.ts"],"sourcesContent":["export const shouldUpdateCreator =\n  (newVal: Record<string, any>, oldVal: Record<string, any>) =>\n  (...rest: string[]) =>\n    rest.some((key) => newVal[key] !== oldVal[key]);\n\nexport const setLegendOption = (shouldUpdate: Function, option: any, newVal: any) => {\n  if (\n    shouldUpdate(\n      'legendShow',\n      'legendItemWidth',\n      'legendItemHeight',\n      'legendOrient',\n      'legendLeft',\n      'legendTop',\n      'legendFontSize',\n    )\n  ) {\n    option.legend[0] = {\n      ...option.legend[0],\n      show: newVal.legendShow,\n      orient: newVal.legendOrient,\n      left: newVal.legendLeft,\n      top: newVal.legendTop,\n      itemWidth: newVal.legendItemWidth,\n      itemHeight: newVal.legendItemHeight,\n      itemStyle: {\n        borderWidth: 0,\n      },\n      textStyle: {\n        fontSize: newVal.legendFontSize,\n      },\n    };\n  }\n};\n\ntype ExtraOpts = {\n  suffixFormat?: boolean;\n  isMixin?: Boolean; // 是否折柱混合\n  orientAxis?: 'xAxis' | 'yAxis';\n};\nexport const setLineBarCommonOption = (shouldUpdate: Function, option: any, newVal: any, extraOpts?: ExtraOpts) => {\n  const orientxAxis = extraOpts?.orientAxis ?? 'xAxis';\n  const orientyAxis = orientxAxis === 'xAxis' ? 'yAxis' : 'xAxis';\n  if (shouldUpdate('xAxisFontSize', 'xAxisFontSizeColor')) {\n    option[orientxAxis][0].axisLabel = {\n      ...(option[orientxAxis].axisLabel ?? {}),\n      textStyle: {\n        ...(option[orientxAxis].axisLabel?.textStyle ?? {}),\n        color: newVal.xAxisFontSizeColor,\n      },\n      fontSize: newVal.xAxisFontSize,\n    };\n  }\n  if (shouldUpdate('yAxisFontSize', 'yAxisFontSizeColor')) {\n    option[orientyAxis].forEach((item: any) => {\n      item.axisLabel = {\n        ...(item.axisLabel ?? {}),\n        textStyle: {\n          ...(option[orientyAxis].axisLabel?.textStyle ?? {}),\n          color: newVal.yAxisFontSizeColor,\n        },\n        fontSize: newVal.yAxisFontSize,\n      };\n    });\n  }\n\n  if (shouldUpdate('xAxisFontSize')) {\n    option[orientxAxis][0].axisTick.show = !!newVal.xAxisFontSize;\n  }\n  if (shouldUpdate('xAxisAxisLineColor')) {\n    option[orientxAxis][0].axisLine.lineStyle.color = newVal.xAxisAxisLineColor;\n  }\n  if (shouldUpdate('showYAxisText')) {\n    option[orientyAxis].forEach((item: any) => {\n      item.axisLabel.show = newVal.showYAxisText;\n    });\n  }\n\n  if (extraOpts?.suffixFormat) {\n    if (shouldUpdate('yAxisTextSuffix', 'yAxisShowZero')) {\n      option[orientyAxis][0].axisLabel.formatter = (val: any) =>\n        !newVal.yAxisShowZero && !val ? '' : val + newVal.yAxisTextSuffix;\n    }\n  }\n\n  if (shouldUpdate('tooltip')) {\n    option.tooltip[0].show = newVal.tooltip;\n  }\n\n  if (shouldUpdate('splitLineType', 'splitLineColor')) {\n    option[orientyAxis].forEach((item: any) => {\n      item.splitLine = {\n        ...item.splitLine,\n        lineStyle: {\n          type: newVal.splitLineType,\n          color: newVal.splitLineColor,\n        },\n      };\n    });\n  }\n  if (shouldUpdate('showSplitLine')) {\n    option[orientyAxis].forEach((item: any) => {\n      item.splitLine = {\n        ...item.splitLine,\n        show: newVal.showSplitLine,\n      };\n    });\n  }\n\n  setLegendOption(shouldUpdate, option, newVal);\n\n  if (shouldUpdate('gridTop', 'gridRight', 'gridBottom', 'gridLeft')) {\n    option.grid = {\n      top: newVal.gridTop,\n      right: newVal.gridRight,\n      bottom: newVal.gridBottom,\n      left: newVal.gridLeft,\n      containLabel: true,\n    };\n  }\n  if (shouldUpdate('xAxisName')) {\n    option[orientxAxis][0].name = newVal.xAxisName;\n  }\n  if (!extraOpts?.isMixin) {\n    if (shouldUpdate('yAxisName')) {\n      option[orientyAxis].forEach((item: any) => {\n        item.name = newVal.yAxisName;\n      });\n    }\n  }\n  if (shouldUpdate('showXAxisAxisTick')) {\n    option[orientxAxis][0].axisTick.show = newVal.showXAxisAxisTick;\n  }\n  if (shouldUpdate('yAxisNameColor')) {\n    option[orientyAxis].forEach((item: any) => {\n      item.nameTextStyle = {\n        color: newVal.yAxisNameColor,\n      };\n    });\n  }\n  if (shouldUpdate('xAxisNameColor')) {\n    option[orientxAxis].forEach((item: any) => {\n      item.nameTextStyle = {\n        color: newVal.xAxisNameColor,\n      };\n    });\n  }\n  if (shouldUpdate('xAxisAxisLabelRotate')) {\n    option[orientxAxis][0].axisLabel.rotate = newVal.xAxisAxisLabelRotate;\n  }\n\n  return option;\n};\n\nexport const setLineBarChartData = (option: any, getChartData: Function, orientAxis: 'xAxis' | 'yAxis' = 'xAxis') => {\n  const data = getChartData();\n  option[orientAxis][0].data = data.xAxisData;\n\n  option.series = data.series;\n  option.legend[0] = {\n    ...option.legend[0],\n    data: data.legendData,\n  };\n};\n\nexport const setCenterRadiusData = ({ innerRadius, outerRadius, centerX, centerY }: any) => ({\n  radius: [innerRadius || 0, outerRadius],\n  center: [centerX || '50%', centerY || '50%'],\n});\n\nexport const getShowMaxLabelOption = (dataLenIndex: number, xAxisFontSize: any) => ({\n  showMaxLabel: true,\n  formatter: (val: string | number, i: number) => {\n    let value = val;\n    if (i === 0) {\n      value = `{left|${val}}`;\n    } else if (i === dataLenIndex) {\n      value = `{right|${val}}`;\n    }\n    return value;\n  },\n  rich: {\n    right: {\n      align: 'right',\n      width: 0,\n      fontSize: xAxisFontSize,\n    },\n    left: {\n      align: 'left',\n      width: 0,\n      fontSize: xAxisFontSize,\n    },\n  },\n});\n\nexport const getGradientColor = (gradient: string[]) => ({\n  type: 'linear',\n  x: 0,\n  y: 0,\n  x2: 0,\n  y2: 1,\n  colorStops: [\n    {\n      offset: 0,\n      color: gradient[0],\n    },\n    {\n      offset: 1,\n      color: gradient[1],\n    },\n  ],\n});\nexport const getBarItemStyle = (value: any, params: any = {}) => {\n  let { borderRadius } = params;\n  if (params.orient === 'horizontal') {\n    const [lt, rt, rb, lb] = borderRadius;\n    borderRadius = [lb, lt, rt, rb];\n    if (value < 0) {\n      borderRadius = [rt, rb, lb, lt];\n    }\n  } else {\n    if (value < 0) {\n      borderRadius = borderRadius.concat().reverse();\n    }\n  }\n\n  return {\n    borderRadius,\n  };\n};\n"],"names":["shouldUpdateCreator","newVal","oldVal","rest","key","setLegendOption","shouldUpdate","option","setLineBarCommonOption","extraOpts","_a","_b","_c","_d","orientxAxis","orientyAxis","item","val","setLineBarChartData","getChartData","orientAxis","data","setCenterRadiusData","innerRadius","outerRadius","centerX","centerY","getShowMaxLabelOption","dataLenIndex","xAxisFontSize","i","value","getBarItemStyle","params","borderRadius","lt","rt","rb","lb"],"mappings":"AAAO,MAAMA,EACX,CAACC,EAA6BC,IAC9B,IAAIC,IACFA,EAAK,KAAMC,GAAQH,EAAOG,KAASF,EAAOE,EAAI,EAErCC,EAAkB,CAACC,EAAwBC,EAAaN,IAAgB,CAEjFK,EACE,aACA,kBACA,mBACA,eACA,aACA,YACA,gBAAA,IAGFC,EAAO,OAAO,GAAK,CACjB,GAAGA,EAAO,OAAO,GACjB,KAAMN,EAAO,WACb,OAAQA,EAAO,aACf,KAAMA,EAAO,WACb,IAAKA,EAAO,UACZ,UAAWA,EAAO,gBAClB,WAAYA,EAAO,iBACnB,UAAW,CACT,YAAa,CACf,EACA,UAAW,CACT,SAAUA,EAAO,cACnB,CAAA,EAGN,EAOaO,EAAyB,CAACF,EAAwBC,EAAaN,EAAaQ,IAA0B,CAxC5G,IAAAC,EAAAC,EAAAC,EAAAC,EAyCC,MAAAC,GAAcJ,EAAAD,GAAA,YAAAA,EAAW,aAAX,KAAAC,EAAyB,QACvCK,EAAcD,IAAgB,QAAU,QAAU,QACpD,OAAAR,EAAa,gBAAiB,oBAAoB,IAC7CC,EAAAO,GAAa,GAAG,UAAY,CACjC,IAAIH,EAAAJ,EAAOO,GAAa,YAApB,KAAAH,EAAiC,CAAC,EACtC,UAAW,CACT,IAAIE,GAAAD,EAAAL,EAAOO,GAAa,YAApB,YAAAF,EAA+B,YAA/B,KAAAC,EAA4C,CAAC,EACjD,MAAOZ,EAAO,kBAChB,EACA,SAAUA,EAAO,aAAA,GAGjBK,EAAa,gBAAiB,oBAAoB,GAC7CC,EAAAQ,GAAa,QAASC,GAAc,CAtDxC,IAAAN,EAAAC,EAAAC,EAuDDI,EAAK,UAAY,CACf,IAAIN,EAAAM,EAAK,YAAL,KAAAN,EAAkB,CAAC,EACvB,UAAW,CACT,IAAIE,GAAAD,EAAAJ,EAAOQ,GAAa,YAApB,YAAAJ,EAA+B,YAA/B,KAAAC,EAA4C,CAAC,EACjD,MAAOX,EAAO,kBAChB,EACA,SAAUA,EAAO,aAAA,CACnB,CACD,EAGCK,EAAa,eAAe,IAC9BC,EAAOO,GAAa,GAAG,SAAS,KAAO,CAAC,CAACb,EAAO,eAE9CK,EAAa,oBAAoB,IACnCC,EAAOO,GAAa,GAAG,SAAS,UAAU,MAAQb,EAAO,oBAEvDK,EAAa,eAAe,GACvBC,EAAAQ,GAAa,QAASC,GAAc,CACpCA,EAAA,UAAU,KAAOf,EAAO,aAAA,CAC9B,EAGCQ,GAAA,MAAAA,EAAW,cACTH,EAAa,kBAAmB,eAAe,IACjDC,EAAOQ,GAAa,GAAG,UAAU,UAAaE,GAC5C,CAAChB,EAAO,eAAiB,CAACgB,EAAM,GAAKA,EAAMhB,EAAO,iBAIpDK,EAAa,SAAS,IACjBC,EAAA,QAAQ,GAAG,KAAON,EAAO,SAG9BK,EAAa,gBAAiB,gBAAgB,GACzCC,EAAAQ,GAAa,QAASC,GAAc,CACzCA,EAAK,UAAY,CACf,GAAGA,EAAK,UACR,UAAW,CACT,KAAMf,EAAO,cACb,MAAOA,EAAO,cAChB,CAAA,CACF,CACD,EAECK,EAAa,eAAe,GACvBC,EAAAQ,GAAa,QAASC,GAAc,CACzCA,EAAK,UAAY,CACf,GAAGA,EAAK,UACR,KAAMf,EAAO,aAAA,CACf,CACD,EAGaI,EAAAC,EAAcC,EAAQN,CAAM,EAExCK,EAAa,UAAW,YAAa,aAAc,UAAU,IAC/DC,EAAO,KAAO,CACZ,IAAKN,EAAO,QACZ,MAAOA,EAAO,UACd,OAAQA,EAAO,WACf,KAAMA,EAAO,SACb,aAAc,EAAA,GAGdK,EAAa,WAAW,IACnBC,EAAAO,GAAa,GAAG,KAAOb,EAAO,WAElCQ,GAAA,MAAAA,EAAW,SACVH,EAAa,WAAW,GACnBC,EAAAQ,GAAa,QAASC,GAAc,CACzCA,EAAK,KAAOf,EAAO,SAAA,CACpB,EAGDK,EAAa,mBAAmB,IAClCC,EAAOO,GAAa,GAAG,SAAS,KAAOb,EAAO,mBAE5CK,EAAa,gBAAgB,GACxBC,EAAAQ,GAAa,QAASC,GAAc,CACzCA,EAAK,cAAgB,CACnB,MAAOf,EAAO,cAAA,CAChB,CACD,EAECK,EAAa,gBAAgB,GACxBC,EAAAO,GAAa,QAASE,GAAc,CACzCA,EAAK,cAAgB,CACnB,MAAOf,EAAO,cAAA,CAChB,CACD,EAECK,EAAa,sBAAsB,IACrCC,EAAOO,GAAa,GAAG,UAAU,OAASb,EAAO,sBAG5CM,CACT,EAEaW,EAAsB,CAACX,EAAaY,EAAwBC,EAAgC,UAAY,CACnH,MAAMC,EAAOF,IACNZ,EAAAa,GAAY,GAAG,KAAOC,EAAK,UAElCd,EAAO,OAASc,EAAK,OACrBd,EAAO,OAAO,GAAK,CACjB,GAAGA,EAAO,OAAO,GACjB,KAAMc,EAAK,UAAA,CAEf,EAEaC,EAAsB,CAAC,CAAE,YAAAC,EAAa,YAAAC,EAAa,QAAAC,EAAS,QAAAC,MAAoB,CAC3F,OAAQ,CAACH,GAAe,EAAGC,CAAW,EACtC,OAAQ,CAACC,GAAW,MAAOC,GAAW,KAAK,CAC7C,GAEaC,EAAwB,CAACC,EAAsBC,KAAwB,CAClF,aAAc,GACd,UAAW,CAACZ,EAAsBa,IAAc,CAC9C,IAAIC,EAAQd,EACZ,OAAIa,IAAM,EACRC,EAAQ,SAASd,KACRa,IAAMF,IACfG,EAAQ,UAAUd,MAEbc,CACT,EACA,KAAM,CACJ,MAAO,CACL,MAAO,QACP,MAAO,EACP,SAAUF,CACZ,EACA,KAAM,CACJ,MAAO,OACP,MAAO,EACP,SAAUA,CACZ,CACF,CACF,GAmBaG,EAAkB,CAACD,EAAYE,EAAc,KAAO,CAC3D,GAAA,CAAE,aAAAC,CAAiB,EAAAD,EACnB,GAAAA,EAAO,SAAW,aAAc,CAClC,KAAM,CAACE,EAAIC,EAAIC,EAAIC,CAAE,EAAIJ,EACzBA,EAAe,CAACI,EAAIH,EAAIC,EAAIC,CAAE,EAC1BN,EAAQ,IACVG,EAAe,CAACE,EAAIC,EAAIC,EAAIH,CAAE,EAChC,MAEIJ,EAAQ,IACKG,EAAAA,EAAa,OAAO,EAAE,QAAQ,GAI1C,MAAA,CACL,aAAAA,CAAA,CAEJ"}