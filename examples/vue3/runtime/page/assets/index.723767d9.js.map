{"version":3,"file":"index.723767d9.js","sources":["../../../../../../packages/ui/src/carea/src/index.vue"],"sourcesContent":["<!-- Test.vue -->\n<template>\n  <div class=\"t-inline-block magic-ui-echart-module\" ref=\"refContainer\" :style=\"style\" />\n</template>\n\n<script lang=\"ts\" setup>\nimport { onMounted, Ref, ref, shallowRef, watch } from 'vue';\nimport * as echarts from 'echarts';\n\nimport { MCArea } from '../../types';\nimport useApp from '../../useApp';\nimport useEcharts from '../../useEcharts';\nimport useStyle from '../../useStyle';\nimport { setLineBarChartData, setLineBarCommonOption, shouldUpdateCreator } from '../../util';\n\nconst props = defineProps<{\n  config: MCArea;\n  // model: Object;\n}>();\n\nuseApp(props);\nconst refContainer = ref<HTMLElement | null>(null);\nconst refCharts = shallowRef<any>();\n\ntype SeriesDataType = {\n  name: string;\n  color: string;\n  data: Array<string | number>;\n  gradient: string[];\n};\n\nconst getChartData = () => {\n  const { dataList, colList } = props.config.dataSourceModel;\n  const result = dataList!.reduce(\n    (\n      ret: {\n        xAxisData: string[];\n        seriesData: SeriesDataType[];\n      },\n      cur: Array<string | number>,\n    ) => {\n      const { xAxisData, seriesData } = ret;\n      cur.forEach((itm: any, idx: number) => {\n        if (idx === 0) {\n          xAxisData.push(itm as string);\n        } else {\n          const tableIdx = idx - 1;\n          seriesData[tableIdx] = seriesData[tableIdx] || { data: [] };\n          seriesData[tableIdx].data.push(itm);\n          const item = colList?.[idx] as any;\n          seriesData[tableIdx].color = item.color;\n          seriesData[tableIdx].name = item.label;\n          seriesData[tableIdx].gradient = item.gradient;\n        }\n      });\n      return ret;\n    },\n    { xAxisData: [], seriesData: [] },\n  );\n  return {\n    xAxisData: result.xAxisData,\n    series: result.seriesData.map((item: any) => ({\n      name: item.name,\n      data: item.data,\n      color: item.color,\n      type: 'line',\n      smooth: props.config.smooth,\n      areaStyle: getAreaStyle(props.config.hasAreaStyle!, item.gradient),\n    })),\n    legendData: colList?.slice(1).map((item) => item.label),\n  };\n};\nconst getAreaStyle = (hasAreaStyle: boolean, gradient: string[]) =>\n  hasAreaStyle\n    ? {\n        opacity: 1,\n        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n          {\n            offset: 0,\n            color: gradient[0],\n          },\n          {\n            offset: 1,\n            color: gradient[1],\n          },\n        ]),\n      }\n    : undefined;\n\nonMounted(() => {\n  const { config } = props;\n  const option = {\n    legend: [\n      {\n        icon: 'roundRect',\n        itemWidth: config.legendItemWidth,\n        itemHeight: config.legendItemHeight,\n        data: config.dataSourceModel.colList?.slice(1).map((item) => item.label),\n      },\n    ],\n    grid: {\n      top: config.gridTop,\n      right: config.gridRight,\n      bottom: config.gridBottom,\n      left: config.gridLeft,\n      containLabel: true,\n    },\n    tooltip: {\n      show: config.tooltip,\n      trigger: 'axis',\n      axisPointer: {\n        type: 'cross',\n      },\n    },\n    xAxis: [\n      {\n        type: 'category',\n        data: [],\n        boundaryGap: false,\n        axisLabel: {\n          textStyle: {\n            color: config.axisLabelTextColor,\n          },\n        } as any,\n        axisLine: {\n          lineStyle: {\n            color: config.xAxisAxisLineColor,\n          },\n        },\n      },\n    ],\n    yAxis: [\n      {\n        type: 'value',\n        axisLabel: {\n          textStyle: {\n            color: config.axisLabelTextColor,\n          },\n        } as any,\n        splitLine: {\n          lineStyle: {\n            type: config.splitLineType,\n            color: config.splitLineColor,\n          },\n        },\n      },\n    ],\n    series: [],\n  } as any;\n  setLineBarChartData(option, getChartData);\n  refCharts.value = useEcharts(option, refContainer as Ref<HTMLElement>).value;\n\n  watch(\n    () => props.config,\n    (newVal, oldVal) => {\n      const option = refCharts.value?.getOption();\n      if (!option) {\n        return;\n      }\n      const shouldUpdate = shouldUpdateCreator(newVal, oldVal);\n\n      setLineBarCommonOption(shouldUpdate, option, newVal);\n\n      if (shouldUpdate('smooth')) {\n        option.series.forEach((item: echarts.EChartsOption) => {\n          item.smooth = newVal.smooth;\n        });\n      }\n      if (shouldUpdate('hasAreaStyle')) {\n        const colList = newVal.dataSourceModel?.colList;\n        option.series = option.series.map((item: any, index: number) => {\n          item.areaStyle = getAreaStyle(newVal.hasAreaStyle as boolean, (colList?.[index + 1] as any).gradient);\n          return item;\n        });\n      }\n\n      setLineBarChartData(option, getChartData);\n      refCharts.value.setOption(option);\n    },\n  );\n});\n\nconst style = useStyle(props, refCharts);\n</script>\n<style lang=\"scss\" scoped>\n.t-inline-block {\n  display: inline-block;\n}\n</style>\n"],"names":["useApp","props","refContainer","refCharts","getChartData","dataList","colList","result","ret","cur","xAxisData","seriesData","itm","idx","tableIdx","item","getAreaStyle","hasAreaStyle","gradient","echarts.graphic.LinearGradient","config","option","_a","setLineBarChartData","useEcharts","newVal","oldVal","option2","shouldUpdate","shouldUpdateCreator","setLineBarCommonOption","_b","index","style","useStyle"],"mappings":"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"}