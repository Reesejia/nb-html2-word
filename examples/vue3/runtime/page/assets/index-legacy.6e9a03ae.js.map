{"version":3,"file":"index-legacy.6e9a03ae.js","sources":["../../../../../../packages/ui/src/svgIcon/src/index.vue"],"sourcesContent":["<template>\n  <div class=\"magic-ui-svgicon t-inline-block magic-ui-image-module\" :class=\"`${props.config?.id}`\">\n    <div v-if=\"showSvg\" :style=\"{ transform: `scale(${scaleX},${scaleY})` }\" class=\"svg-icon-box\">\n      <div v-html=\"svgHtml(props)\" style=\"display: inline-flex\" :style=\"{ fontSize: `${props.config.size}px` }\"></div>\n    </div>\n  </div>\n</template>\n<script lang=\"ts\" setup>\nimport { computed, onBeforeUnmount, onMounted, ref, watch } from 'vue';\n\nimport { MSvgIcon } from '../../types';\nimport useApp from '../../useApp';\nconst scaleX = ref(1);\nconst scaleY = ref(1);\nconst showSvg = ref(true);\nconst props = defineProps<{\n  config: MSvgIcon & {\n    id: string;\n    fill: string;\n    svgHtmlStr: string;\n    size: number;\n    src: string;\n  };\n  model?: Object;\n}>();\n\nwatch(\n  () => props.config.src,\n  (newVal) => {\n    console.log(newVal, 'props.config.src');\n  },\n  {\n    immediate: true,\n  },\n);\nuseApp(props);\nconst size = computed(() => props.config.size);\nonMounted(() => {\n  const elbox1 = document.querySelector(`.magic-ui-svgicon.${props.config?.id}`) || null;\n  const resizeObserver = new ResizeObserver((entries) => {\n    // eslint-disable-next-line array-callback-return\n    entries.forEach((entry) => {\n      if (entry?.target?.id === props.config?.id) {\n        const { width, height } = entry.contentRect;\n        scaleX.value = width / size.value;\n        scaleY.value = height / size.value;\n        props.config.style.width = width;\n        props.config.style.height = height;\n      }\n    });\n  });\n  if (elbox1) {\n    resizeObserver.observe(elbox1);\n  }\n  onBeforeUnmount(() => {\n    if (elbox1) {\n      resizeObserver.unobserve(elbox1);\n    }\n  });\n});\nconst svgHtml = (props: any) => {\n  const fillTest = /fill=(\"([^>+].*?)\"|'([^>+].*?)')/g;\n  const newHtmlStr = props.config.svgHtmlStr.replace(fillTest, `fill=\"${props.config?.fill}\"`);\n  return newHtmlStr;\n};\n</script>\n<style lang=\"scss\">\n.svgIcon-body {\n  box-sizing: border-box;\n}\n\n.magic-ui-svgicon {\n  position: relative;\n\n  .svg-icon-box {\n    width: 60px;\n    height: 60px;\n    position: absolute;\n    left: 0;\n    top: 0;\n    transform-origin: 0 0;\n    svg {\n      width: 60px;\n      height: 60px;\n    }\n  }\n}\n</style>\n"],"names":["scaleX","Vue","scaleY","showSvg","watch","props","config","src","newVal","console","log","immediate","useApp","size","computed","onMounted","elbox1","document","querySelector","id","resizeObserver","ResizeObserver","entries","forEach","entry","target","width","height","contentRect","value","style","observe","onBeforeUnmount","unobserve","props2","svgHtmlStr","replace","fill"],"mappings":"gpBAYAA,EAAeC,WACfC,EAAeD,WACfE,EAAgBF,YAYhBA,IAAAG,OAAA,IAAAC,EAAAC,OAAAC,MACqBC,IAEjBC,QAAAC,IAAAF,EAAA,mBAAA,GACF,CACAG,WAAA,IAIFC,EAAAP,GACA,MAAAQ,EAAaZ,IAAAa,UAAA,IAAAT,EAAAC,OAAAO,cACbZ,IAAAc,WAAA,KACE,MAAAC,EAAAC,SAAAC,cAAA,qBAAAb,EAAAC,QAAAa,OAAA,KACAC,EAAA,IAAAC,gBAAAC,IAEEA,EAAAC,SAAAC,IACE,GAAAA,GAAAC,QAAAN,KAAAd,EAAAC,QAAAa,GAAA,CACE,MAAAO,MAAAA,EAAAC,OAAAA,GAAAH,EAAAI,YACA5B,EAAA6B,MAAAH,EAAAb,EAAAgB,MACA3B,EAAA2B,MAAAF,EAAAd,EAAAgB,MACAxB,EAAAC,OAAAwB,MAAAJ,MAAAA,EACArB,EAAAC,OAAAwB,MAAAH,OAAAA,CAA4B,IAC9B,IAGJX,GACEI,EAAAW,QAAAf,GAEFf,IAAA+B,iBAAA,KACEhB,GACEI,EAAAa,UAAAjB,EAA+B,GACjC,2WAGJkB,IAEEA,EAAA5B,OAAA6B,WAAAC,QADA,oCACA,SAAAF,EAAA5B,QAAA+B,qJAFFH"}