{"version":3,"file":"index.86e12368.js","sources":["../../../../../../packages/ui/src/cbar/src/index.vue"],"sourcesContent":["<template>\n  <div class=\"t-inline-block magic-ui-echart-module\" ref=\"refCbar\" :style=\"style\" />\n</template>\n\n<script lang=\"ts\" setup>\nimport { onMounted, Ref, ref, shallowRef, watch } from 'vue';\n\nimport { legendInitOption, seriesLabelOption } from '../../commonConfig';\nimport { MCBar } from '../../types';\nimport useApp from '../../useApp';\nimport useEcharts from '../../useEcharts';\nimport useStyle from '../../useStyle';\nimport { getBarItemStyle, setLineBarChartData, setLineBarCommonOption, shouldUpdateCreator } from '../../util';\n\nconst props = defineProps<{\n  config: MCBar;\n}>();\n\nuseApp(props);\n\nconst refCbar = ref<HTMLElement | null>(null);\nconst refCharts = shallowRef<any>();\n\ntype SeriesDataType = {\n  type: 'bar';\n  name: string;\n  round: boolean;\n  data: Array<string | number> | { value: any; [prop: string]: any };\n  gradient: string[];\n  color: string;\n};\nconst getChartData = () => {\n  const newVal = props.config;\n  const { dataList, colList } = newVal.dataSourceModel;\n  const borderRadius = [newVal.borderRadiusLT, newVal.borderRadiusRT, newVal.borderRadiusRB, newVal.borderRadiusLB].map(\n    (item) => Number(item || 0),\n  );\n  const result = dataList!.reduce(\n    (\n      ret: {\n        xAxisData: string[];\n        seriesData: SeriesDataType[];\n      },\n      cur: Array<string | number>,\n    ) => {\n      const { xAxisData, seriesData } = ret;\n      cur.forEach((itm: any, idx: number) => {\n        if (idx === 0) {\n          xAxisData.push(itm as string);\n        } else {\n          const tableIdx = idx - 1;\n          seriesData[tableIdx] = seriesData[tableIdx] || { data: [] };\n          const seriesDataItem = seriesData[tableIdx];\n\n          seriesDataItem.type = 'bar';\n          const item = colList?.[idx] as any;\n          seriesDataItem.name = item.label;\n          seriesDataItem.color = item.color;\n          seriesDataItem.data.push({\n            value: itm,\n            itemStyle: getBarItemStyle(itm, { borderRadius, orient: curOrient }),\n            label: seriesLabelOption(newVal, {\n              isBar: true,\n              value: itm,\n              orient: curOrient,\n            }),\n          });\n        }\n      });\n      return ret;\n    },\n    { xAxisData: [], seriesData: [] },\n  );\n  return {\n    xAxisData: result.xAxisData,\n    series: result.seriesData,\n    legendData: colList?.slice(1).map((item) => item.label),\n  };\n};\n\nlet curOrient: undefined | string;\nonMounted(() => {\n  const { config } = props;\n  const option = {\n    legend: [\n      {\n        ...legendInitOption(config),\n        data: [],\n      },\n    ],\n    grid: {\n      top: config.gridTop,\n      right: config.gridRight,\n      bottom: config.gridBottom,\n      left: config.gridLeft,\n      containLabel: true,\n    },\n    tooltip: [\n      {\n        show: config.tooltip,\n        trigger: 'axis',\n        axisPointer: {\n          type: 'cross',\n        },\n        confine: true,\n      },\n    ],\n    xAxis: [\n      {\n        type: 'category',\n        nameGap: 5,\n        data: [],\n        axisLabel: {\n          textStyle: {\n            color: config.xAxisFontSizeColor,\n          },\n          fontSize: config.xAxisFontSize,\n        } as any,\n      },\n    ],\n    yAxis: [\n      {\n        type: 'value',\n        nameGap: 5,\n        axisLabel: {\n          textStyle: {\n            color: config.yAxisFontSizeColor,\n          },\n          fontSize: config.yAxisFontSize,\n        } as any,\n        splitLine: {\n          lineStyle: {\n            type: config.splitLineType,\n            color: config.splitLineColor,\n          },\n        },\n      },\n    ],\n    series: [],\n  } as any;\n\n  refCharts.value = useEcharts(option, refCbar as Ref<HTMLElement>).value;\n\n  watch(\n    () => props.config,\n    (newVal, oldVal: any = { orient: 'vertical' }) => {\n      const option = refCharts.value?.getOption();\n      const shouldUpdate = shouldUpdateCreator(newVal, oldVal);\n      const orientAxis = newVal.orient === 'horizontal' ? 'yAxis' : 'xAxis';\n      if (shouldUpdate('orient')) {\n        curOrient = newVal.orient;\n        const temp = option.xAxis;\n        option.xAxis = option.yAxis;\n        option.yAxis = temp;\n      }\n      setLineBarCommonOption(shouldUpdate, option, newVal, { suffixFormat: true, orientAxis });\n\n      setLineBarChartData(option, getChartData, orientAxis);\n      refCharts.value.setOption(option, true);\n    },\n    {\n      immediate: true,\n    },\n  );\n});\n\nconst style = useStyle(props, refCharts);\n</script>\n<style lang=\"scss\" scoped>\n.t-inline-block {\n  display: inline-block;\n}\n</style>\n"],"names":["useApp","props","refCbar","refCharts","getChartData","newVal","dataList","colList","borderRadius","item","result","ret","cur","xAxisData","seriesData","itm","idx","tableIdx","seriesDataItem","getBarItemStyle","curOrient","seriesLabelOption","config","option","legendInitOption","useEcharts","oldVal","option2","_a","shouldUpdate","shouldUpdateCreator","orientAxis","temp","setLineBarCommonOption","setLineBarChartData","style","useStyle"],"mappings":"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"}