const h=(t,e)=>(...i)=>i.some(s=>t[s]!==e[s]),L=(t,e,i)=>{t("legendShow","legendItemWidth","legendItemHeight","legendOrient","legendLeft","legendTop","legendFontSize")&&(e.legend[0]={...e.legend[0],show:i.legendShow,orient:i.legendOrient,left:i.legendLeft,top:i.legendTop,itemWidth:i.legendItemWidth,itemHeight:i.legendItemHeight,itemStyle:{borderWidth:0},textStyle:{fontSize:i.legendFontSize}})},y=(t,e,i,s)=>{var f,l,A,g;const o=(f=s==null?void 0:s.orientAxis)!=null?f:"xAxis",r=o==="xAxis"?"yAxis":"xAxis";return t("xAxisFontSize","xAxisFontSizeColor")&&(e[o][0].axisLabel={...(l=e[o].axisLabel)!=null?l:{},textStyle:{...(g=(A=e[o].axisLabel)==null?void 0:A.textStyle)!=null?g:{},color:i.xAxisFontSizeColor},fontSize:i.xAxisFontSize}),t("yAxisFontSize","yAxisFontSizeColor")&&e[r].forEach(x=>{var n,S,c;x.axisLabel={...(n=x.axisLabel)!=null?n:{},textStyle:{...(c=(S=e[r].axisLabel)==null?void 0:S.textStyle)!=null?c:{},color:i.yAxisFontSizeColor},fontSize:i.yAxisFontSize}}),t("xAxisFontSize")&&(e[o][0].axisTick.show=!!i.xAxisFontSize),t("xAxisAxisLineColor")&&(e[o][0].axisLine.lineStyle.color=i.xAxisAxisLineColor),t("showYAxisText")&&e[r].forEach(x=>{x.axisLabel.show=i.showYAxisText}),s!=null&&s.suffixFormat&&t("yAxisTextSuffix","yAxisShowZero")&&(e[r][0].axisLabel.formatter=x=>!i.yAxisShowZero&&!x?"":x+i.yAxisTextSuffix),t("tooltip")&&(e.tooltip[0].show=i.tooltip),t("splitLineType","splitLineColor")&&e[r].forEach(x=>{x.splitLine={...x.splitLine,lineStyle:{type:i.splitLineType,color:i.splitLineColor}}}),t("showSplitLine")&&e[r].forEach(x=>{x.splitLine={...x.splitLine,show:i.showSplitLine}}),L(t,e,i),t("gridTop","gridRight","gridBottom","gridLeft")&&(e.grid={top:i.gridTop,right:i.gridRight,bottom:i.gridBottom,left:i.gridLeft,containLabel:!0}),t("xAxisName")&&(e[o][0].name=i.xAxisName),s!=null&&s.isMixin||t("yAxisName")&&e[r].forEach(x=>{x.name=i.yAxisName}),t("showXAxisAxisTick")&&(e[o][0].axisTick.show=i.showXAxisAxisTick),t("yAxisNameColor")&&e[r].forEach(x=>{x.nameTextStyle={color:i.yAxisNameColor}}),t("xAxisNameColor")&&e[o].forEach(x=>{x.nameTextStyle={color:i.xAxisNameColor}}),t("xAxisAxisLabelRotate")&&(e[o][0].axisLabel.rotate=i.xAxisAxisLabelRotate),e},a=(t,e,i="xAxis")=>{const s=e();t[i][0].data=s.xAxisData,t.series=s.series,t.legend[0]={...t.legend[0],data:s.legendData}},m=({innerRadius:t,outerRadius:e,centerX:i,centerY:s})=>({radius:[t||0,e],center:[i||"50%",s||"50%"]}),b=(t,e)=>({showMaxLabel:!0,formatter:(i,s)=>{let o=i;return s===0?o=`{left|${i}}`:s===t&&(o=`{right|${i}}`),o},rich:{right:{align:"right",width:0,fontSize:e},left:{align:"left",width:0,fontSize:e}}}),z=(t,e={})=>{let{borderRadius:i}=e;if(e.orient==="horizontal"){const[s,o,r,f]=i;i=[f,s,o,r],t<0&&(i=[o,r,f,s])}else t<0&&(i=i.concat().reverse());return{borderRadius:i}};export{y as a,a as b,z as c,L as d,m as e,b as g,h as s};
//# sourceMappingURL=util.80e82fe7.js.map
