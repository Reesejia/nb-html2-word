{"version":3,"file":"index.0dd841f2.js","sources":["../../../../../../packages/ui/src/clinebar/src/index.vue"],"sourcesContent":["<template>\n  <div class=\"t-inline-block magic-ui-echart-module\" ref=\"refContainer\" :style=\"style\" />\n</template>\n\n<script lang=\"ts\" setup>\nimport { onMounted, Ref, ref, shallowRef, watch } from 'vue';\nimport * as echarts from 'echarts';\n\nimport { legendInitOption, seriesLabelOption } from '../../commonConfig';\nimport { MCLineBar } from '../../types';\nimport useApp from '../../useApp';\nimport useEcharts from '../../useEcharts';\nimport useStyle from '../../useStyle';\nimport { getBarItemStyle, setLineBarChartData, setLineBarCommonOption, shouldUpdateCreator } from '../../util';\nconst props = defineProps<{\n  config: MCLineBar;\n  // model: Object;\n}>();\n\nuseApp(props);\nconst refContainer = ref<HTMLElement | null>(null);\nconst refCharts = shallowRef<any>();\n\ntype SeriesDataType = {\n  type: MCLineBar['type'];\n  name: string;\n  color?: string;\n  data: Array<string | number> | { value: any; [prop: string]: any };\n  gradient: string[];\n  smooth?: boolean;\n  symbol?: string;\n  yAxisIndex?: number;\n  tooltip: Record<string, any>;\n  areaStyle?: Record<string, any>;\n  zlevel?: number;\n  symbolSize?: number;\n  label?: Object;\n};\n\nconst getChartData = () => {\n  const newVal = props.config;\n  const { dataList, colList } = props.config.dataSourceModel!;\n  const { smooth, hasAreaStyle } = newVal;\n  const barZlevel = hasAreaStyle && newVal.lineChartLowestLevel ? 1 : 0;\n  const borderRadius = [newVal.borderRadiusLT, newVal.borderRadiusRT, newVal.borderRadiusRB, newVal.borderRadiusLB].map(\n    (item) => Number(item || 0),\n  );\n  let whichYAxisIndex = ''\n  const result = dataList!.reduce(\n    (\n      ret: {\n        xAxisData: string[];\n        seriesData: SeriesDataType[];\n      },\n      cur: Array<string | number>,\n    ) => {\n      const { xAxisData, seriesData } = ret;\n      cur.forEach((itm: any, idx: number) => {\n        if (idx === 0) {\n          xAxisData.push(itm as string);\n        } else {\n          const tableIdx = idx - 1;\n          seriesData[tableIdx] = seriesData[tableIdx] || { data: [] };\n\n          const seriesDataItem = seriesData[tableIdx];\n\n          const item = colList?.[idx] as any;\n          const { type } = item;\n          const isLine = type === 'line';\n          seriesDataItem.type = type;\n          seriesDataItem.name = item.label;\n          seriesDataItem.color = item.color;\n          seriesDataItem.tooltip = {\n            valueFormatter(value: any) {\n              return value + item.suffix || '';\n            },\n          };\n          if (!whichYAxisIndex) {\n            whichYAxisIndex = type;\n          }\n          if (whichYAxisIndex !== type) {\n            seriesDataItem.yAxisIndex = 1;\n          }\n          if (isLine) {\n            seriesDataItem.label = seriesLabelOption(newVal);\n            seriesDataItem.data.push(itm);\n            seriesDataItem.smooth = smooth;\n            seriesDataItem.areaStyle = getAreaStyle(newVal.hasAreaStyle!, item.gradient, newVal.areaStyleOpacity);\n            seriesDataItem.symbol = newVal.markSymbol;\n            seriesDataItem.symbolSize = newVal.symbolSize;\n          } else {\n            seriesDataItem.data.push({\n              value: itm,\n              itemStyle: getBarItemStyle(itm, { borderRadius }),\n              label: seriesLabelOption(newVal, {\n                isBar: true,\n                value: itm,\n              }),\n            });\n            seriesDataItem.zlevel = barZlevel;\n          }\n        }\n      });\n      return ret;\n    },\n    { xAxisData: [], seriesData: [] },\n  );\n  return {\n    xAxisData: result.xAxisData,\n    series: result.seriesData,\n    legendData: colList?.slice(1).map((item) => item.label),\n  };\n};\nconst getAreaStyle = (hasAreaStyle: boolean, gradient: string[], areaStyleOpacity?: boolean) =>\n  hasAreaStyle\n    ? {\n        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n          {\n            offset: 0,\n            color: gradient[0],\n          },\n          {\n            offset: 1,\n            color: gradient[areaStyleOpacity ? 1 : 0],\n          },\n        ]),\n      }\n    : undefined;\nonMounted(() => {\n  const { config } = props;\n  const option = {\n    legend: [\n      {\n        ...legendInitOption(config),\n        data: [],\n      },\n    ],\n    grid: {\n      top: config.gridTop,\n      right: config.gridRight,\n      bottom: config.gridBottom,\n      left: config.gridLeft,\n      containLabel: true,\n    },\n    tooltip: [\n      {\n        show: config.tooltip,\n        trigger: 'axis',\n        axisPointer: {\n          type: 'cross',\n        },\n        confine: true,\n      },\n    ],\n    xAxis: [\n      {\n        type: 'category',\n        nameGap: 5,\n        data: [],\n        axisLabel: {\n          textStyle: {\n            color: config.xAxisFontSizeColor,\n          },\n          fontSize: config.xAxisFontSize,\n        } as any,\n        axisLine: {\n          lineStyle: {\n            color: config.xAxisAxisLineColor,\n          },\n        },\n      },\n    ],\n    yAxis: [\n      {\n        type: 'value',\n        nameGap: 5,\n        axisLabel: {\n          textStyle: {\n            color: config.yAxisFontSizeColor,\n          },\n          fontSize: config.yAxisFontSize,\n        } as any,\n        splitLine: {\n          lineStyle: {\n            type: config.splitLineType,\n            color: config.splitLineColor,\n          },\n        },\n      },\n      {\n        type: 'value',\n        nameGap: 5,\n        axisLabel: {\n          textStyle: {\n            color: config.yAxisFontSizeColor,\n          },\n          fontSize: config.yAxisFontSize,\n        } as any,\n        splitLine: {\n          lineStyle: {\n            type: config.splitLineType,\n            color: config.splitLineColor,\n          },\n        },\n      },\n    ],\n    series: [],\n  } as any;\n  refCharts.value = useEcharts(option, refContainer as Ref<HTMLElement>).value;\n  watch(\n    () => props.config,\n    (newVal, oldVal: any = {}) => {\n      const option = refCharts.value?.getOption();\n      const shouldUpdate = shouldUpdateCreator(newVal, oldVal);\n\n      setLineBarCommonOption(shouldUpdate, option, newVal, { isMixin: true });\n      if (shouldUpdate('yAxisLeftSuffix', 'yAxisRightSuffix', 'yAxisShowZero')) {\n        const suffixs = [newVal.yAxisLeftSuffix, newVal.yAxisRightSuffix];\n        option.yAxis.forEach((item: any, index: number) => {\n          item.axisLabel.formatter = (value: string) => (!newVal.yAxisShowZero && !value ? '' : value + suffixs[index]);\n        });\n      }\n      if (shouldUpdate('yAxisLeftName', 'yAxisRightName')) {\n        const names = [newVal.yAxisLeftName, newVal.yAxisRightName];\n        option.yAxis.forEach((item: any, index: number) => {\n          item.name = names[index];\n        });\n      }\n\n      setLineBarChartData(option, getChartData);\n      refCharts.value.setOption(option, true);\n    },\n    {\n      immediate: true,\n    },\n  );\n});\n\nconst style = useStyle(props, refCharts);\n</script>\n<style lang=\"scss\" scoped>\n.t-inline-block {\n  display: inline-block;\n}\n</style>\n"],"names":["useApp","props","refContainer","refCharts","getChartData","newVal","dataList","colList","smooth","hasAreaStyle","barZlevel","borderRadius","item","whichYAxisIndex","result","ret","cur","xAxisData","seriesData","itm","idx","tableIdx","seriesDataItem","type","isLine","value","seriesLabelOption","getAreaStyle","getBarItemStyle","gradient","areaStyleOpacity","echarts.graphic.LinearGradient","config","option","legendInitOption","useEcharts","oldVal","option2","_a","shouldUpdate","shouldUpdateCreator","setLineBarCommonOption","suffixs","index","names","setLineBarChartData","style","useStyle"],"mappings":"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"}