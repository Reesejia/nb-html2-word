{"version":3,"file":"index-legacy.f0bbaefb.js","sources":["../../../../../../packages/ui/src/carea/src/index.vue"],"sourcesContent":["<!-- Test.vue -->\n<template>\n  <div class=\"t-inline-block magic-ui-echart-module\" ref=\"refContainer\" :style=\"style\" />\n</template>\n\n<script lang=\"ts\" setup>\nimport { onMounted, Ref, ref, shallowRef, watch } from 'vue';\nimport * as echarts from 'echarts';\n\nimport { MCArea } from '../../types';\nimport useApp from '../../useApp';\nimport useEcharts from '../../useEcharts';\nimport useStyle from '../../useStyle';\nimport { setLineBarChartData, setLineBarCommonOption, shouldUpdateCreator } from '../../util';\n\nconst props = defineProps<{\n  config: MCArea;\n  // model: Object;\n}>();\n\nuseApp(props);\nconst refContainer = ref<HTMLElement | null>(null);\nconst refCharts = shallowRef<any>();\n\ntype SeriesDataType = {\n  name: string;\n  color: string;\n  data: Array<string | number>;\n  gradient: string[];\n};\n\nconst getChartData = () => {\n  const { dataList, colList } = props.config.dataSourceModel;\n  const result = dataList!.reduce(\n    (\n      ret: {\n        xAxisData: string[];\n        seriesData: SeriesDataType[];\n      },\n      cur: Array<string | number>,\n    ) => {\n      const { xAxisData, seriesData } = ret;\n      cur.forEach((itm: any, idx: number) => {\n        if (idx === 0) {\n          xAxisData.push(itm as string);\n        } else {\n          const tableIdx = idx - 1;\n          seriesData[tableIdx] = seriesData[tableIdx] || { data: [] };\n          seriesData[tableIdx].data.push(itm);\n          const item = colList?.[idx] as any;\n          seriesData[tableIdx].color = item.color;\n          seriesData[tableIdx].name = item.label;\n          seriesData[tableIdx].gradient = item.gradient;\n        }\n      });\n      return ret;\n    },\n    { xAxisData: [], seriesData: [] },\n  );\n  return {\n    xAxisData: result.xAxisData,\n    series: result.seriesData.map((item: any) => ({\n      name: item.name,\n      data: item.data,\n      color: item.color,\n      type: 'line',\n      smooth: props.config.smooth,\n      areaStyle: getAreaStyle(props.config.hasAreaStyle!, item.gradient),\n    })),\n    legendData: colList?.slice(1).map((item) => item.label),\n  };\n};\nconst getAreaStyle = (hasAreaStyle: boolean, gradient: string[]) =>\n  hasAreaStyle\n    ? {\n        opacity: 1,\n        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n          {\n            offset: 0,\n            color: gradient[0],\n          },\n          {\n            offset: 1,\n            color: gradient[1],\n          },\n        ]),\n      }\n    : undefined;\n\nonMounted(() => {\n  const { config } = props;\n  const option = {\n    legend: [\n      {\n        icon: 'roundRect',\n        itemWidth: config.legendItemWidth,\n        itemHeight: config.legendItemHeight,\n        data: config.dataSourceModel.colList?.slice(1).map((item) => item.label),\n      },\n    ],\n    grid: {\n      top: config.gridTop,\n      right: config.gridRight,\n      bottom: config.gridBottom,\n      left: config.gridLeft,\n      containLabel: true,\n    },\n    tooltip: {\n      show: config.tooltip,\n      trigger: 'axis',\n      axisPointer: {\n        type: 'cross',\n      },\n    },\n    xAxis: [\n      {\n        type: 'category',\n        data: [],\n        boundaryGap: false,\n        axisLabel: {\n          textStyle: {\n            color: config.axisLabelTextColor,\n          },\n        } as any,\n        axisLine: {\n          lineStyle: {\n            color: config.xAxisAxisLineColor,\n          },\n        },\n      },\n    ],\n    yAxis: [\n      {\n        type: 'value',\n        axisLabel: {\n          textStyle: {\n            color: config.axisLabelTextColor,\n          },\n        } as any,\n        splitLine: {\n          lineStyle: {\n            type: config.splitLineType,\n            color: config.splitLineColor,\n          },\n        },\n      },\n    ],\n    series: [],\n  } as any;\n  setLineBarChartData(option, getChartData);\n  refCharts.value = useEcharts(option, refContainer as Ref<HTMLElement>).value;\n\n  watch(\n    () => props.config,\n    (newVal, oldVal) => {\n      const option = refCharts.value?.getOption();\n      if (!option) {\n        return;\n      }\n      const shouldUpdate = shouldUpdateCreator(newVal, oldVal);\n\n      setLineBarCommonOption(shouldUpdate, option, newVal);\n\n      if (shouldUpdate('smooth')) {\n        option.series.forEach((item: echarts.EChartsOption) => {\n          item.smooth = newVal.smooth;\n        });\n      }\n      if (shouldUpdate('hasAreaStyle')) {\n        const colList = newVal.dataSourceModel?.colList;\n        option.series = option.series.map((item: any, index: number) => {\n          item.areaStyle = getAreaStyle(newVal.hasAreaStyle as boolean, (colList?.[index + 1] as any).gradient);\n          return item;\n        });\n      }\n\n      setLineBarChartData(option, getChartData);\n      refCharts.value.setOption(option);\n    },\n  );\n});\n\nconst style = useStyle(props, refCharts);\n</script>\n<style lang=\"scss\" scoped>\n.t-inline-block {\n  display: inline-block;\n}\n</style>\n"],"names":["useApp","props","refContainer","Vue","refCharts","shallowRef","getChartData","dataList","colList","config","dataSourceModel","result","reduce","ret","cur","xAxisData","seriesData","forEach","itm","idx","push","tableIdx","data","item","color","name","label","gradient","series","map","type","smooth","areaStyle","getAreaStyle","hasAreaStyle","legendData","slice","opacity","echarts.graphic.LinearGradient","offset","onMounted","option","legend","icon","itemWidth","legendItemWidth","itemHeight","legendItemHeight","grid","top","gridTop","right","gridRight","bottom","gridBottom","left","gridLeft","containLabel","tooltip","show","trigger","axisPointer","xAxis","boundaryGap","axisLabel","textStyle","axisLabelTextColor","axisLine","lineStyle","xAxisAxisLineColor","yAxis","splitLine","splitLineType","splitLineColor","setLineBarChartData","value","useEcharts","watch","newVal","oldVal","option2","getOption","shouldUpdate","shouldUpdateCreator","setLineBarCommonOption","index","setOption","style","useStyle"],"mappings":"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"}