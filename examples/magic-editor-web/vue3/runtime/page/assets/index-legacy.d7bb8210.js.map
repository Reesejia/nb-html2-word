{"version":3,"file":"index-legacy.d7bb8210.js","sources":["../../../../../../packages/ui/src/cbar/src/index.vue"],"sourcesContent":["<template>\n  <div class=\"t-inline-block magic-ui-echart-module\" ref=\"refCbar\" :style=\"style\" />\n</template>\n\n<script lang=\"ts\" setup>\nimport { onMounted, Ref, ref, shallowRef, watch } from 'vue';\n\nimport { legendInitOption, seriesLabelOption } from '../../commonConfig';\nimport { MCBar } from '../../types';\nimport useApp from '../../useApp';\nimport useEcharts from '../../useEcharts';\nimport useStyle from '../../useStyle';\nimport { getBarItemStyle, setLineBarChartData, setLineBarCommonOption, shouldUpdateCreator } from '../../util';\n\nconst props = defineProps<{\n  config: MCBar;\n}>();\n\nuseApp(props);\n\nconst refCbar = ref<HTMLElement | null>(null);\nconst refCharts = shallowRef<any>();\n\ntype SeriesDataType = {\n  type: 'bar';\n  name: string;\n  round: boolean;\n  data: Array<string | number> | { value: any; [prop: string]: any };\n  gradient: string[];\n  color: string;\n};\nconst getChartData = () => {\n  const newVal = props.config;\n  const { dataList, colList } = newVal.dataSourceModel;\n  const borderRadius = [newVal.borderRadiusLT, newVal.borderRadiusRT, newVal.borderRadiusRB, newVal.borderRadiusLB].map(\n    (item) => Number(item || 0),\n  );\n  const result = dataList!.reduce(\n    (\n      ret: {\n        xAxisData: string[];\n        seriesData: SeriesDataType[];\n      },\n      cur: Array<string | number>,\n    ) => {\n      const { xAxisData, seriesData } = ret;\n      cur.forEach((itm: any, idx: number) => {\n        if (idx === 0) {\n          xAxisData.push(itm as string);\n        } else {\n          const tableIdx = idx - 1;\n          seriesData[tableIdx] = seriesData[tableIdx] || { data: [] };\n          const seriesDataItem = seriesData[tableIdx];\n\n          seriesDataItem.type = 'bar';\n          const item = colList?.[idx] as any;\n          seriesDataItem.name = item.label;\n          seriesDataItem.color = item.color;\n          seriesDataItem.data.push({\n            value: itm,\n            itemStyle: getBarItemStyle(itm, { borderRadius, orient: curOrient }),\n            label: seriesLabelOption(newVal, {\n              isBar: true,\n              value: itm,\n              orient: curOrient,\n            }),\n          });\n        }\n      });\n      return ret;\n    },\n    { xAxisData: [], seriesData: [] },\n  );\n  return {\n    xAxisData: result.xAxisData,\n    series: result.seriesData,\n    legendData: colList?.slice(1).map((item) => item.label),\n  };\n};\n\nlet curOrient: undefined | string;\nonMounted(() => {\n  const { config } = props;\n  const option = {\n    legend: [\n      {\n        ...legendInitOption(config),\n        data: [],\n      },\n    ],\n    grid: {\n      top: config.gridTop,\n      right: config.gridRight,\n      bottom: config.gridBottom,\n      left: config.gridLeft,\n      containLabel: true,\n    },\n    tooltip: [\n      {\n        show: config.tooltip,\n        trigger: 'axis',\n        axisPointer: {\n          type: 'cross',\n        },\n        confine: true,\n      },\n    ],\n    xAxis: [\n      {\n        type: 'category',\n        nameGap: 5,\n        data: [],\n        axisLabel: {\n          textStyle: {\n            color: config.xAxisFontSizeColor,\n          },\n          fontSize: config.xAxisFontSize,\n        } as any,\n      },\n    ],\n    yAxis: [\n      {\n        type: 'value',\n        nameGap: 5,\n        axisLabel: {\n          textStyle: {\n            color: config.yAxisFontSizeColor,\n          },\n          fontSize: config.yAxisFontSize,\n        } as any,\n        splitLine: {\n          lineStyle: {\n            type: config.splitLineType,\n            color: config.splitLineColor,\n          },\n        },\n      },\n    ],\n    series: [],\n  } as any;\n\n  refCharts.value = useEcharts(option, refCbar as Ref<HTMLElement>).value;\n\n  watch(\n    () => props.config,\n    (newVal, oldVal: any = { orient: 'vertical' }) => {\n      const option = refCharts.value?.getOption();\n      const shouldUpdate = shouldUpdateCreator(newVal, oldVal);\n      const orientAxis = newVal.orient === 'horizontal' ? 'yAxis' : 'xAxis';\n      if (shouldUpdate('orient')) {\n        curOrient = newVal.orient;\n        const temp = option.xAxis;\n        option.xAxis = option.yAxis;\n        option.yAxis = temp;\n      }\n      setLineBarCommonOption(shouldUpdate, option, newVal, { suffixFormat: true, orientAxis });\n\n      setLineBarChartData(option, getChartData, orientAxis);\n      refCharts.value.setOption(option, true);\n    },\n    {\n      immediate: true,\n    },\n  );\n});\n\nconst style = useStyle(props, refCharts);\n</script>\n<style lang=\"scss\" scoped>\n.t-inline-block {\n  display: inline-block;\n}\n</style>\n"],"names":["useApp","props","refCbar","Vue","refCharts","shallowRef","getChartData","newVal","config","dataList","colList","dataSourceModel","borderRadius","borderRadiusLT","borderRadiusRT","borderRadiusRB","borderRadiusLB","map","item","Number","result","reduce","ret","cur","xAxisData","seriesData","forEach","itm","idx","push","tableIdx","data","seriesDataItem","type","name","label","color","value","itemStyle","getBarItemStyle","orient","curOrient","seriesLabelOption","isBar","series","legendData","slice","onMounted","option","legend","legendInitOption","grid","top","gridTop","right","gridRight","bottom","gridBottom","left","gridLeft","containLabel","tooltip","show","trigger","axisPointer","confine","xAxis","nameGap","axisLabel","textStyle","xAxisFontSizeColor","fontSize","xAxisFontSize","yAxis","yAxisFontSizeColor","yAxisFontSize","splitLine","lineStyle","splitLineType","splitLineColor","useEcharts","watch","oldVal","option2","getOption","shouldUpdate","shouldUpdateCreator","orientAxis","temp","setLineBarCommonOption","suffixFormat","setLineBarChartData","setOption","immediate","style","useStyle"],"mappings":"+kBAkBAA,EAAAC,GAEA,MAAAC,EAAgBC,cAChBC,EAAkBD,IAAgBE,aAUlCC,EAAAA,KACE,MAAAC,EAAAN,EAAAO,QACAC,SAAAA,EAAAC,QAAAA,GAAAH,EAAAI,gBACAC,EAAA,CAAAL,EAAAM,eAAAN,EAAAO,eAAAP,EAAAQ,eAAAR,EAAAS,gBAAAC,KAAkHC,GAAAC,OAAAD,GAAA,KAGlHE,EAAAX,EAAAY,QAAyB,CAAAC,EAAAC,KAQrB,MAAAC,UAAAA,EAAAC,WAAAA,GAAAH,EAwBA,OAvBAC,EAAAG,SAAA,CAAAC,EAAAC,KACE,GAAA,IAAAA,EACEJ,EAAAK,KAAAF,OAA4B,CAE5B,MAAAG,EAAAF,EAAA,EACAH,EAAAK,GAAAL,EAAAK,IAAA,CAAAC,KAAA,IACA,MAAAC,EAAAP,EAAAK,GAEAE,EAAAC,KAAA,MACA,MAAAf,EAAAR,IAAAkB,GACAI,EAAAE,KAAAhB,EAAAiB,MACAH,EAAAI,MAAAlB,EAAAkB,MACAJ,EAAAD,KAAAF,KAAA,CAAyBQ,MAAAV,EAChBW,UAAAC,EAAAZ,EAAA,CAAAf,eAAA4B,OAAAC,IAC4DN,MAAAO,EAAAnC,EAAA,CAClCoC,OAAA,EACxBN,MAAAV,EACAa,OAAAC,KAGV,KAGLnB,CAAA,GACF,CAAAE,UAAA,GAAAC,WAAA,KAGF,MAAA,CAAOD,UAAAJ,EAAAI,UACaoB,OAAAxB,EAAAK,WACHoB,WAAAnC,GAAAoC,MAAA,GAAA7B,KAAAC,GAAAA,EAAAiB,QACuC,EAI1D,IAAAM,EACAtC,IAAA4C,WAAA,KACE,MAAAvC,OAAAA,GAAAP,EACA+C,EAAA,CAAeC,OAAA,CACL,IACNC,EAAA1C,GAC4BuB,KAAA,KAG9BoB,KAAA,CACMC,IAAA5C,EAAA6C,QACQC,MAAA9C,EAAA+C,UACEC,OAAAhD,EAAAiD,WACCC,KAAAlD,EAAAmD,SACFC,cAAA,GAEfC,QAAA,CACS,CACPC,KAAAtD,EAAAqD,QACeE,QAAA,OACJC,YAAA,CACI/B,KAAA,SAEbgC,SAAA,IAGJC,MAAA,CACO,CACLjC,KAAA,WACQkC,QAAA,EACGpC,KAAA,GACFqC,UAAA,CACIC,UAAA,CACEjC,MAAA5B,EAAA8D,oBAEXC,SAAA/D,EAAAgE,iBAINC,MAAA,CACO,CACLxC,KAAA,QACQkC,QAAA,EACGC,UAAA,CACEC,UAAA,CACEjC,MAAA5B,EAAAkE,oBAEXH,SAAA/D,EAAAmE,eAEFC,UAAA,CACWC,UAAA,CACE5C,KAAAzB,EAAAsE,cACI1C,MAAA5B,EAAAuE,mBAKrBnC,OAAA,IAIFxC,EAAAiC,MAAA2C,EAAAhC,EAAA9C,GAAAmC,MAEAlC,IAAA8E,OAAA,IAAAhF,EAAAO,SACc,CAAAD,EAAA2E,EAAA,CAAA1C,OAAA,eAEV,MAAA2C,EAAA/E,EAAAiC,OAAA+C,YACAC,EAAAC,EAAA/E,EAAA2E,GACAK,EAAA,eAAAhF,EAAAiC,OAAA,QAAA,QACA,GAAA6C,EAAA,UAAA,CACE5C,EAAAlC,EAAAiC,OACA,MAAAgD,EAAAL,EAAAjB,MACAiB,EAAAjB,MAAAiB,EAAAV,MACAU,EAAAV,MAAAe,CAAe,CAEjBC,EAAAJ,EAAAF,EAAA5E,EAAA,CAAAmF,cAAA,EAAAH,eAEAI,EAAAR,EAAA7E,EAAAiF,GACAnF,EAAAiC,MAAAuD,UAAAT,GAAA,EAAA,GACF,CACAU,WAAA,GAEA,IAIJ,MAAAC,EAAAC,EAAA9F,EAAAG"}