{"version":3,"file":"index.6a881698.js","sources":["../../../../../../packages/ui/src/cline/src/index.vue"],"sourcesContent":["<template>\n  <div class=\"t-inline-block magic-ui-echart-module\" ref=\"refContainer\" :style=\"style\" />\n</template>\n\n<script lang=\"ts\" setup>\nimport { onMounted, Ref, ref, shallowRef, watch } from 'vue';\nimport * as echarts from 'echarts';\n\nimport { legendInitOption, seriesLabelOption } from '../../commonConfig';\nimport { MCLine } from '../../types';\nimport useApp from '../../useApp';\nimport useEcharts from '../../useEcharts';\nimport useStyle from '../../useStyle';\nimport { getShowMaxLabelOption, setLineBarChartData, setLineBarCommonOption, shouldUpdateCreator } from '../../util';\nconst props = defineProps<{\n  config: MCLine;\n  // model: Object;\n}>();\n\nuseApp(props);\nconst refContainer = ref<HTMLElement | null>(null);\nconst refCharts = shallowRef<any>();\n\ntype SeriesDataType = {\n  type: 'line';\n  name: string;\n  color: string;\n  data: Array<string | number>;\n  gradient: string[];\n  smooth: boolean;\n  areaStyle: ReturnType<typeof getAreaStyle>;\n  symbol: MCLine['markSymbol'];\n  label?: Object;\n  symbolSize: number;\n};\n\nlet xAxisData = [];\nconst getChartData = () => {\n  const { dataList, colList } = props.config.dataSourceModel;\n  const result = dataList!.reduce(\n    (\n      ret: {\n        xAxisData: string[];\n        seriesData: SeriesDataType[];\n      },\n      cur: Array<string | number>,\n    ) => {\n      const { xAxisData, seriesData } = ret;\n      cur.forEach((itm: any, idx: number) => {\n        if (idx === 0) {\n          xAxisData.push(itm as string);\n        } else {\n          const tableIdx = idx - 1;\n          seriesData[tableIdx] = seriesData[tableIdx] || { data: [] };\n\n          const seriesDataItem = seriesData[tableIdx];\n          seriesDataItem.type = 'line';\n          seriesDataItem.data.push(itm);\n\n          const item = colList?.[idx] as any;\n          seriesDataItem.color = item.color;\n          seriesDataItem.name = item.label;\n          seriesDataItem.label = seriesLabelOption(props.config);\n          seriesDataItem.gradient = item.gradient;\n          seriesDataItem.smooth = props.config.smooth!;\n          seriesDataItem.areaStyle = getAreaStyle(\n            props.config.hasAreaStyle!,\n            item.gradient,\n            props.config.areaStyleOpacity,\n          );\n          seriesDataItem.symbol = props.config.markSymbol;\n          seriesDataItem.symbolSize = props.config.symbolSize;\n        }\n      });\n      return ret;\n    },\n    { xAxisData: [], seriesData: [] },\n  );\n  xAxisData = result.xAxisData;\n  return {\n    xAxisData: result.xAxisData,\n    series: result.seriesData,\n    legendData: colList?.slice(1).map((item) => item.label),\n  };\n};\nconst getAreaStyle = (hasAreaStyle: boolean, gradient: string[], areaStyleOpacity?: boolean) =>\n  hasAreaStyle\n    ? {\n        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n          {\n            offset: 0,\n            color: gradient[0],\n          },\n          {\n            offset: 1,\n            color: gradient[areaStyleOpacity ? 1 : 0],\n          },\n        ]),\n      }\n    : undefined;\n\nonMounted(() => {\n  const { config } = props;\n  const option = {\n    legend: [\n      {\n        ...legendInitOption(config),\n        data: [],\n      },\n    ],\n    grid: {\n      top: config.gridTop,\n      right: config.gridRight,\n      bottom: config.gridBottom,\n      left: config.gridLeft,\n      containLabel: true,\n    },\n    tooltip: [\n      {\n        show: config.tooltip,\n        trigger: 'axis',\n        axisPointer: {\n          type: 'cross',\n        },\n        confine: true,\n      },\n    ],\n    xAxis: [\n      {\n        type: 'category',\n        nameGap: 5,\n        data: [],\n        boundaryGap: false,\n        axisLabel: {\n          textStyle: {\n            color: config.xAxisFontSizeColor,\n          },\n          fontSize: config.xAxisFontSize,\n        } as any,\n        axisLine: {\n          lineStyle: {\n            color: config.xAxisAxisLineColor,\n          },\n        },\n      },\n    ],\n    yAxis: [\n      {\n        type: 'value',\n        nameGap: 5,\n        axisLabel: {\n          textStyle: {\n            color: config.yAxisFontSizeColor,\n          },\n          fontSize: config.yAxisFontSize,\n        } as any,\n        splitLine: {\n          lineStyle: {\n            type: config.splitLineType,\n            color: config.splitLineColor,\n          },\n        },\n      },\n    ],\n    series: [],\n  } as any;\n  refCharts.value = useEcharts(option, refContainer as Ref<HTMLElement>).value;\n\n  watch(\n    () => props.config,\n    (newVal, oldVal: any = {}) => {\n      const option = refCharts.value?.getOption();\n      const shouldUpdate = shouldUpdateCreator(newVal, oldVal);\n\n      setLineBarCommonOption(shouldUpdate, option, newVal, { suffixFormat: true });\n\n      if (shouldUpdate('smooth')) {\n        option.series.forEach((item: echarts.EChartsOption) => {\n          item.smooth = newVal.smooth;\n        });\n      }\n      if (shouldUpdate('hasAreaStyle')) {\n        const colList = newVal.dataSourceModel?.colList;\n        option.series = option.series.map((item: any, index: number) => {\n          item.areaStyle = getAreaStyle(\n            newVal.hasAreaStyle as boolean,\n            (colList?.[index + 1] as any).gradient,\n            newVal.getAreaStyle,\n          );\n          return item;\n        });\n      }\n      if (shouldUpdate('xAxisHeadTailTextFormat', 'xAxisFontSize')) {\n        const dataLenIndex = xAxisData.length - 1;\n        const shouldFormat = newVal.xAxisHeadTailTextFormat && dataLenIndex > 0;\n        Object.assign(\n          option.xAxis[0].axisLabel,\n          shouldFormat\n            ? getShowMaxLabelOption(dataLenIndex, newVal.xAxisFontSize)\n            : { formatter: undefined, rich: undefined },\n        );\n      }\n\n      setLineBarChartData(option, getChartData);\n      refCharts.value.setOption(option, true);\n    },\n    {\n      immediate: true,\n    },\n  );\n});\n\nconst style = useStyle(props, refCharts);\n</script>\n<style lang=\"scss\" scoped>\n.t-inline-block {\n  display: inline-block;\n}\n</style>\n"],"names":["useApp","props","refContainer","refCharts","xAxisData","getChartData","dataList","colList","result","ret","cur","xAxisData2","seriesData","itm","idx","tableIdx","seriesDataItem","item","seriesLabelOption","getAreaStyle","hasAreaStyle","gradient","areaStyleOpacity","echarts.graphic.LinearGradient","config","option","legendInitOption","useEcharts","newVal","oldVal","option2","_a","shouldUpdate","shouldUpdateCreator","setLineBarCommonOption","_b","index","dataLenIndex","shouldFormat","getShowMaxLabelOption","setLineBarChartData","style","useStyle"],"mappings":"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"}