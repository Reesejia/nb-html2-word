{"version":3,"file":"index-legacy.4ba8793e.js","sources":["../../../../../../packages/ui/src/ckline/src/index.vue"],"sourcesContent":["<template>\n  <div class=\"t-inline-block magic-ui-echart-module\" ref=\"refKCline\" :style=\"style\" />\n</template>\n\n<script lang=\"ts\" setup>\nimport { onMounted, Ref, ref, shallowRef, watch } from 'vue';\n\nimport { legendInitOption } from '../../commonConfig';\nimport { MCKLine } from '../../types';\nimport useApp from '../../useApp';\nimport useEcharts from '../../useEcharts';\nimport useStyle from '../../useStyle';\nimport { getShowMaxLabelOption, setLineBarChartData, setLineBarCommonOption, shouldUpdateCreator } from '../../util';\n\nconst props = defineProps<{\n  config: MCKLine;\n  // model: Object;\n}>();\n\nuseApp(props);\n\nconst refKCline = ref<HTMLElement | null>(null);\nconst refCharts = shallowRef<any>();\n\nlet xAxisData = [];\nconst getChartData = () => {\n  const { dataList, colList } = props.config.dataSourceModel;\n  const result = dataList!.reduce(\n    (\n      ret: {\n        xAxisData: string[];\n        seriesData: any[];\n      },\n      cur: Array<string | number>,\n    ) => {\n      const { xAxisData, seriesData } = ret;\n      cur.forEach((itm: any, idx: number) => {\n        if (idx === 0) {\n          xAxisData.push(itm as string);\n        } else {\n          const tableIdx = idx - 1;\n          seriesData[tableIdx] = seriesData[tableIdx] || { data: [] };\n\n          const seriesDataItem = seriesData[tableIdx];\n          const item = colList![idx];\n          seriesDataItem.name = item.label;\n          seriesDataItem.type = item.type;\n          if (item.type === 'candlestick') {\n            seriesDataItem.data.push(itm.split(','));\n          } else {\n            seriesDataItem.symbol = item.hasSymbol ? 'emptyCircle' : 'none';\n            seriesDataItem.color = item.color;\n            seriesDataItem.lineStyle = {\n              opacity: 0.5,\n            };\n            seriesDataItem.data.push(itm);\n          }\n        }\n      });\n      return ret;\n    },\n    { xAxisData: [], seriesData: [] },\n  );\n  xAxisData = result.xAxisData;\n  return {\n    xAxisData: result.xAxisData,\n    series: result.seriesData,\n    legendData: colList?.slice(1).map((item) => item.label),\n  };\n};\nonMounted(() => {\n  const { config } = props;\n  const option = {\n    legend: [\n      {\n        ...legendInitOption(config),\n        data: config.dataSourceModel.colList?.slice(1).map((item) => item.label),\n      },\n    ],\n    grid: {\n      top: config.gridTop,\n      right: config.gridRight,\n      bottom: config.gridBottom,\n      left: config.gridLeft,\n      containLabel: true,\n    },\n    tooltip: [\n      {\n        show: config.tooltip,\n        trigger: 'axis',\n        axisPointer: {\n          type: 'cross',\n        },\n      },\n    ],\n    xAxis: [\n      {\n        type: 'category',\n        data: [],\n        boundaryGap: false,\n        axisLabel: {\n          textStyle: {\n            color: config.axisLabelTextColor,\n          },\n          fontSize: config.xAxisFontSize,\n        } as any,\n        axisLine: {\n          onZero: false,\n          lineStyle: {\n            color: config.xAxisAxisLineColor,\n          },\n        },\n        min: 'dataMin',\n        max: 'dataMax',\n      },\n    ],\n    yAxis: [\n      {\n        type: 'value',\n        axisLabel: {\n          textStyle: {\n            color: config.axisLabelTextColor,\n          },\n        } as any,\n        splitLine: {\n          lineStyle: {\n            type: config.splitLineType,\n            color: config.splitLineColor,\n          },\n        },\n      },\n    ],\n    series: [],\n  } as any;\n  refCharts.value = useEcharts(option, refKCline as Ref<HTMLElement>).value;\n\n  watch(\n    () => props.config,\n    (newVal, oldVal: any = {}) => {\n      const option = refCharts.value?.getOption();\n      const shouldUpdate = shouldUpdateCreator(newVal, oldVal);\n      setLineBarCommonOption(shouldUpdate, option, newVal, { suffixFormat: true });\n      if (shouldUpdate('xAxisHeadTailTextFormat', 'xAxisFontSize')) {\n        const dataLenIndex = xAxisData.length - 1;\n        const shouldFormat = newVal.xAxisHeadTailTextFormat && dataLenIndex > 0;\n        Object.assign(\n          option.xAxis[0].axisLabel,\n          shouldFormat\n            ? getShowMaxLabelOption(dataLenIndex, newVal.xAxisFontSize)\n            : { formatter: undefined, rich: undefined },\n        );\n      }\n      setLineBarChartData(option, getChartData);\n      refCharts.value.setOption(option, true);\n    },\n    {\n      immediate: true,\n    },\n  );\n});\n\nconst style = useStyle(props, refCharts);\n</script>\n<style lang=\"scss\" scoped>\n.t-inline-block {\n  display: inline-block;\n}\n</style>\n"],"names":["useApp","props","refKCline","Vue","refCharts","shallowRef","xAxisData","getChartData","dataList","colList","config","dataSourceModel","result","reduce","ret","cur","xAxisData2","seriesData","forEach","itm","idx","push","tableIdx","data","seriesDataItem","item","name","label","type","split","symbol","hasSymbol","color","lineStyle","opacity","series","legendData","slice","map","onMounted","option","legend","legendInitOption","grid","top","gridTop","right","gridRight","bottom","gridBottom","left","gridLeft","containLabel","tooltip","show","trigger","axisPointer","xAxis","boundaryGap","axisLabel","textStyle","axisLabelTextColor","fontSize","xAxisFontSize","axisLine","onZero","xAxisAxisLineColor","min","max","yAxis","splitLine","splitLineType","splitLineColor","value","useEcharts","watch","newVal","oldVal","option2","getOption","shouldUpdate","shouldUpdateCreator","setLineBarCommonOption","suffixFormat","dataLenIndex","length","shouldFormat","xAxisHeadTailTextFormat","Object","assign","getShowMaxLabelOption","formatter","rich","setLineBarChartData","setOption","immediate","style","useStyle"],"mappings":"ukBAmBAA,EAAAC,GAEA,MAAAC,EAAkBC,cAClBC,EAAkBD,IAAgBE,aAElC,IAAAC,EAAA,GACA,MAAAC,EAAAA,KACE,MAAAC,SAAAA,EAAAC,QAAAA,GAAAR,EAAAS,OAAAC,gBACAC,EAAAJ,EAAAK,QAAyB,CAAAC,EAAAC,KAQrB,MAAAT,UAAAU,EAAAC,WAAAA,GAAAH,EAwBA,OAvBAC,EAAAG,SAAA,CAAAC,EAAAC,KACE,GAAA,IAAAA,EACEJ,EAAAK,KAAAF,OAA4B,CAE5B,MAAAG,EAAAF,EAAA,EACAH,EAAAK,GAAAL,EAAAK,IAAA,CAAAC,KAAA,IAEA,MAAAC,EAAAP,EAAAK,GACAG,EAAAhB,EAAAW,GACAI,EAAAE,KAAAD,EAAAE,MACAH,EAAAI,KAAAH,EAAAG,KACA,gBAAAH,EAAAG,KACEJ,EAAAD,KAAAF,KAAAF,EAAAU,MAAA,OAEAL,EAAAM,OAAAL,EAAAM,UAAA,cAAA,OACAP,EAAAQ,MAAAP,EAAAO,MACAR,EAAAS,UAAA,CAA2BC,QAAA,IAG3BV,EAAAD,KAAAF,KAAAF,GACF,KAGJL,CAAA,GACF,CAAAR,UAAA,GAAAW,WAAA,KAIF,OADAX,EAAAM,EAAAN,UACA,CAAOA,UAAAM,EAAAN,UACa6B,OAAAvB,EAAAK,WACHmB,WAAA3B,GAAA4B,MAAA,GAAAC,KAAAb,GAAAA,EAAAE,QACuC,EAG1DxB,IAAAoC,WAAA,KACE,MAAA7B,OAAAA,GAAAT,EACAuC,EAAA,CAAeC,OAAA,CACL,IACNC,EAAAhC,GAC4Ba,KAAAb,EAAAC,gBAAAF,SAAA4B,MAAA,GAAAC,KAAAb,GAAAA,EAAAE,UAG9BgB,KAAA,CACMC,IAAAlC,EAAAmC,QACQC,MAAApC,EAAAqC,UACEC,OAAAtC,EAAAuC,WACCC,KAAAxC,EAAAyC,SACFC,cAAA,GAEfC,QAAA,CACS,CACPC,KAAA5C,EAAA2C,QACeE,QAAA,OACJC,YAAA,CACI5B,KAAA,WAIjB6B,MAAA,CACO,CACL7B,KAAA,WACQL,KAAA,GACCmC,aAAA,EACMC,UAAA,CACFC,UAAA,CACE5B,MAAAtB,EAAAmD,oBAEXC,SAAApD,EAAAqD,eAEFC,SAAA,CACUC,QAAA,EACAhC,UAAA,CACGD,MAAAtB,EAAAwD,qBAGbC,IAAA,UACKC,IAAA,YAGTC,MAAA,CACO,CACLzC,KAAA,QACQ+B,UAAA,CACKC,UAAA,CACE5B,MAAAtB,EAAAmD,qBAGbS,UAAA,CACWrC,UAAA,CACEL,KAAAlB,EAAA6D,cACIvC,MAAAtB,EAAA8D,mBAKrBrC,OAAA,IAGF/B,EAAAqE,MAAAC,EAAAlC,EAAAtC,GAAAuE,MAEAtE,IAAAwE,OAAA,IAAA1E,EAAAS,SACc,CAAAkE,EAAAC,EAAA,MAEV,MAAAC,EAAA1E,EAAAqE,OAAAM,YACAC,EAAAC,EAAAL,EAAAC,GAEA,GADAK,EAAAF,EAAAF,EAAAF,EAAA,CAAAO,cAAA,IACAH,EAAA,0BAAA,iBAAA,CACE,MAAAI,EAAA9E,EAAA+E,OAAA,EACAC,EAAAV,EAAAW,yBAAAH,EAAA,EACAI,OAAAC,OAAOX,EAAArB,MAAA,GAAAE,UACW2B,EAAAI,EAAAN,EAAAR,EAAAb,eAAA,CAAA4B,eAAA,EAAAC,UAAA,GAIlB,CAEFC,EAAAf,EAAAvE,GACAH,EAAAqE,MAAAqB,UAAAhB,GAAA,EAAA,GACF,CACAiB,WAAA,GAEA,IAIJ,MAAAC,EAAAC,EAAAhG,EAAAG"}