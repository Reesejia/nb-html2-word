{"version":3,"file":"index.1cb1dff7.js","sources":["../../../../../../packages/ui/src/ckline/src/index.vue"],"sourcesContent":["<template>\n  <div class=\"t-inline-block magic-ui-echart-module\" ref=\"refKCline\" :style=\"style\" />\n</template>\n\n<script lang=\"ts\" setup>\nimport { onMounted, Ref, ref, shallowRef, watch } from 'vue';\n\nimport { legendInitOption } from '../../commonConfig';\nimport { MCKLine } from '../../types';\nimport useApp from '../../useApp';\nimport useEcharts from '../../useEcharts';\nimport useStyle from '../../useStyle';\nimport { getShowMaxLabelOption, setLineBarChartData, setLineBarCommonOption, shouldUpdateCreator } from '../../util';\n\nconst props = defineProps<{\n  config: MCKLine;\n  // model: Object;\n}>();\n\nuseApp(props);\n\nconst refKCline = ref<HTMLElement | null>(null);\nconst refCharts = shallowRef<any>();\n\nlet xAxisData = [];\nconst getChartData = () => {\n  const { dataList, colList } = props.config.dataSourceModel;\n  const result = dataList!.reduce(\n    (\n      ret: {\n        xAxisData: string[];\n        seriesData: any[];\n      },\n      cur: Array<string | number>,\n    ) => {\n      const { xAxisData, seriesData } = ret;\n      cur.forEach((itm: any, idx: number) => {\n        if (idx === 0) {\n          xAxisData.push(itm as string);\n        } else {\n          const tableIdx = idx - 1;\n          seriesData[tableIdx] = seriesData[tableIdx] || { data: [] };\n\n          const seriesDataItem = seriesData[tableIdx];\n          const item = colList![idx];\n          seriesDataItem.name = item.label;\n          seriesDataItem.type = item.type;\n          if (item.type === 'candlestick') {\n            seriesDataItem.data.push(itm.split(','));\n          } else {\n            seriesDataItem.symbol = item.hasSymbol ? 'emptyCircle' : 'none';\n            seriesDataItem.color = item.color;\n            seriesDataItem.lineStyle = {\n              opacity: 0.5,\n            };\n            seriesDataItem.data.push(itm);\n          }\n        }\n      });\n      return ret;\n    },\n    { xAxisData: [], seriesData: [] },\n  );\n  xAxisData = result.xAxisData;\n  return {\n    xAxisData: result.xAxisData,\n    series: result.seriesData,\n    legendData: colList?.slice(1).map((item) => item.label),\n  };\n};\nonMounted(() => {\n  const { config } = props;\n  const option = {\n    legend: [\n      {\n        ...legendInitOption(config),\n        data: config.dataSourceModel.colList?.slice(1).map((item) => item.label),\n      },\n    ],\n    grid: {\n      top: config.gridTop,\n      right: config.gridRight,\n      bottom: config.gridBottom,\n      left: config.gridLeft,\n      containLabel: true,\n    },\n    tooltip: [\n      {\n        show: config.tooltip,\n        trigger: 'axis',\n        axisPointer: {\n          type: 'cross',\n        },\n      },\n    ],\n    xAxis: [\n      {\n        type: 'category',\n        data: [],\n        boundaryGap: false,\n        axisLabel: {\n          textStyle: {\n            color: config.axisLabelTextColor,\n          },\n          fontSize: config.xAxisFontSize,\n        } as any,\n        axisLine: {\n          onZero: false,\n          lineStyle: {\n            color: config.xAxisAxisLineColor,\n          },\n        },\n        min: 'dataMin',\n        max: 'dataMax',\n      },\n    ],\n    yAxis: [\n      {\n        type: 'value',\n        axisLabel: {\n          textStyle: {\n            color: config.axisLabelTextColor,\n          },\n        } as any,\n        splitLine: {\n          lineStyle: {\n            type: config.splitLineType,\n            color: config.splitLineColor,\n          },\n        },\n      },\n    ],\n    series: [],\n  } as any;\n  refCharts.value = useEcharts(option, refKCline as Ref<HTMLElement>).value;\n\n  watch(\n    () => props.config,\n    (newVal, oldVal: any = {}) => {\n      const option = refCharts.value?.getOption();\n      const shouldUpdate = shouldUpdateCreator(newVal, oldVal);\n      setLineBarCommonOption(shouldUpdate, option, newVal, { suffixFormat: true });\n      if (shouldUpdate('xAxisHeadTailTextFormat', 'xAxisFontSize')) {\n        const dataLenIndex = xAxisData.length - 1;\n        const shouldFormat = newVal.xAxisHeadTailTextFormat && dataLenIndex > 0;\n        Object.assign(\n          option.xAxis[0].axisLabel,\n          shouldFormat\n            ? getShowMaxLabelOption(dataLenIndex, newVal.xAxisFontSize)\n            : { formatter: undefined, rich: undefined },\n        );\n      }\n      setLineBarChartData(option, getChartData);\n      refCharts.value.setOption(option, true);\n    },\n    {\n      immediate: true,\n    },\n  );\n});\n\nconst style = useStyle(props, refCharts);\n</script>\n<style lang=\"scss\" scoped>\n.t-inline-block {\n  display: inline-block;\n}\n</style>\n"],"names":["useApp","props","refKCline","refCharts","xAxisData","getChartData","dataList","colList","result","ret","cur","xAxisData2","seriesData","itm","idx","tableIdx","seriesDataItem","item","config","option","legendInitOption","_a","useEcharts","newVal","oldVal","option2","shouldUpdate","shouldUpdateCreator","setLineBarCommonOption","dataLenIndex","shouldFormat","getShowMaxLabelOption","setLineBarChartData","style","useStyle"],"mappings":"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"}