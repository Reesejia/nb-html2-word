{"version":3,"file":"index-legacy.429905d6.js","sources":["../../../../../../packages/ui/src/cradar/src/index.vue"],"sourcesContent":["<!-- Test.vue -->\n<template>\n  <div class=\"t-inline-block magic-ui-echart-module\" ref=\"refCradar\" :style=\"style\" />\n</template>\n\n<script lang=\"ts\" setup>\nimport { onMounted, Ref, ref, shallowRef, watch } from 'vue';\nimport * as echarts from 'echarts';\n\nimport { legendInitOption } from '../../commonConfig';\nimport { MCRadar } from '../../types';\nimport useApp from '../../useApp';\nimport useEcharts from '../../useEcharts';\nimport useStyle from '../../useStyle';\nimport { setCenterRadiusData, setLegendOption, shouldUpdateCreator } from '../../util';\n\nconst props = defineProps<{\n  config: MCRadar;\n  // model: Object;\n}>();\n\nuseApp(props);\n\nconst refCradar = ref<HTMLElement | null>(null);\nconst refCharts = shallowRef<any>();\n\nconst getChartData = () => {\n  const { dataList, colList } = props.config.dataSourceModel;\n  const result = dataList!.reduce(\n    (\n      ret: {\n        radar: echarts.RadarComponentOption;\n        seriesData: echarts.RadarSeriesOption;\n      },\n      cur: Array<string | number>,\n    ) => {\n      const { radar, seriesData } = ret;\n      radar.indicator = radar.indicator || [];\n      seriesData.data =\n        seriesData.data ||\n        colList?.slice(1).map((item) => ({\n          value: [],\n          name: item.label,\n        }));\n      seriesData.type = 'radar';\n      cur.forEach((itm: any, idx: number) => {\n        if (idx === 0) {\n          radar.indicator!.push({\n            name: itm,\n          });\n        } else {\n          const tableIdx = idx - 1;\n          const dataItem: any = seriesData.data![tableIdx];\n          dataItem.value.push(itm);\n\n          const item = colList?.[idx] as any;\n          if (item.color) {\n            dataItem.lineStyle = {\n              color: item.color,\n            };\n          }\n          dataItem.areaStyle = getAreaStyle(item.gradient);\n          dataItem.itemStyle = dataItem.areaStyle;\n        }\n      });\n      return ret;\n    },\n    { radar: {}, seriesData: {} },\n  );\n\n  Object.assign(result.radar, setCenterRadiusData(props.config), {\n    shape: props.config.shape,\n    axisName: {\n      color: props.config.axisNameColor,\n    },\n    axisLine: {\n      lineStyle: {\n        color: props.config.axisLineColor,\n      },\n    },\n    splitLine: {\n      lineStyle: {\n        color: props.config.splitLineColor,\n      },\n    },\n    splitArea: {\n      areaStyle: {\n        color: props.config.splitAreaColor,\n      },\n    },\n  });\n  Object.assign(result.seriesData, {\n    symbol: props.config.markSymbol,\n  });\n  return {\n    radar: [result.radar],\n    series: [result.seriesData],\n    legendData: colList?.slice(1).map((item) => item.label),\n  };\n};\nconst getAreaStyle = (gradient: string[]) => ({\n  color: new echarts.graphic.RadialGradient(0.5, 0.5, 1, [\n    {\n      offset: 0,\n      color: gradient[0],\n    },\n    {\n      offset: 1,\n      color: gradient[1],\n    },\n  ]),\n});\nconst setChartData = (option: any, getChartData: Function) => {\n  const data = getChartData();\n  option.series = data.series;\n  option.radar = data.radar;\n  option.legend[0] = {\n    ...option.legend[0],\n    data: data.legendData,\n  };\n};\nonMounted(() => {\n  const { config } = props;\n  const option: echarts.EChartsOption = {\n    legend: [\n      {\n        ...legendInitOption(config),\n        data: config.dataSourceModel.colList?.slice(1).map((item) => item.label),\n      },\n    ],\n    tooltip: [\n      {\n        show: config.tooltip,\n        trigger: 'item',\n      },\n    ],\n    radar: [],\n    series: [],\n  };\n  refCharts.value = useEcharts(option, refCradar as Ref<HTMLElement>).value;\n\n  watch(\n    () => props.config,\n    (newVal, oldVal: any = {}) => {\n      const option = refCharts.value?.getOption();\n      const shouldUpdate = shouldUpdateCreator(newVal, oldVal);\n      setLegendOption(shouldUpdate, option, newVal);\n      if (shouldUpdate('tooltip')) {\n        option.tooltip[0].show = newVal.tooltip;\n      }\n      setChartData(option, getChartData);\n      refCharts.value.setOption(option, true);\n    },\n    {\n      immediate: true,\n    },\n  );\n});\n\nconst style = useStyle(props, refCharts);\n</script>\n<style lang=\"scss\" scoped>\n.t-inline-block {\n  display: inline-block;\n}\n</style>\n"],"names":["useApp","props","refCradar","Vue","refCharts","shallowRef","getChartData","dataList","colList","config","dataSourceModel","result","reduce","ret","cur","radar","seriesData","indicator","data","slice","map","item","value","name","label","type","forEach","itm","idx","push","tableIdx","dataItem","color","lineStyle","areaStyle","getAreaStyle","gradient","itemStyle","Object","assign","setCenterRadiusData","shape","axisName","axisNameColor","axisLine","axisLineColor","splitLine","splitLineColor","splitArea","splitAreaColor","symbol","markSymbol","series","legendData","echarts.graphic.RadialGradient","offset","onMounted","option","legend","legendInitOption","tooltip","show","trigger","useEcharts","watch","newVal","oldVal","option2","getOption","shouldUpdate","shouldUpdateCreator","setLegendOption","setChartData","getChartData2","setOption","immediate","style","useStyle"],"mappings":"ukBAqBAA,EAAAC,GAEA,MAAAC,EAAkBC,cAClBC,EAAkBD,IAAgBE,aAElCC,EAAAA,KACE,MAAAC,SAAAA,EAAAC,QAAAA,GAAAP,EAAAQ,OAAAC,gBACAC,EAAAJ,EAAAK,QAAyB,CAAAC,EAAAC,KAQrB,MAAAC,MAAAA,EAAAC,WAAAA,GAAAH,EA6BA,OA5BAE,EAAAE,UAAAF,EAAAE,WAAA,GACAD,EAAAE,KAAAF,EAAAE,MAAAV,GAAAW,MAAA,GAAAC,KAAAC,IAAA,CAEmCC,MAAA,GACvBC,KAAAF,EAAAG,UAGZR,EAAAS,KAAA,QACAX,EAAAY,SAAA,CAAAC,EAAAC,KACE,GAAA,IAAAA,EACEb,EAAAE,UAAAY,KAAA,CAAsBN,KAAAI,QAErB,CAED,MAAAG,EAAAF,EAAA,EACAG,EAAAf,EAAAE,KAAAY,GACAC,EAAAT,MAAAO,KAAAF,GAEA,MAAAN,EAAAb,IAAAoB,GACAP,EAAAW,QACED,EAAAE,UAAA,CAAqBD,MAAAX,EAAAW,QAIvBD,EAAAG,UAAAC,EAAAd,EAAAe,UACAL,EAAAM,UAAAN,EAAAG,SAA8B,KAGlCrB,CAAA,GACF,CAAAE,MAAA,CAAA,EAAAC,WAAA,KA4BF,OAxBAsB,OAAAC,OAAA5B,EAAAI,MAAAyB,EAAAvC,EAAAQ,QAAA,CAA+DgC,MAAAxC,EAAAQ,OAAAgC,MACzCC,SAAA,CACVV,MAAA/B,EAAAQ,OAAAkC,eAEVC,SAAA,CACUX,UAAA,CACGD,MAAA/B,EAAAQ,OAAAoC,gBAGbC,UAAA,CACWb,UAAA,CACED,MAAA/B,EAAAQ,OAAAsC,iBAGbC,UAAA,CACWd,UAAA,CACEF,MAAA/B,EAAAQ,OAAAwC,mBAKfX,OAAAC,OAAA5B,EAAAK,WAAA,CAAiCkC,OAAAjD,EAAAQ,OAAA0C,aAGjC,CAAOpC,MAAA,CAAAJ,EAAAI,OACeqC,OAAA,CAAAzC,EAAAK,YACMqC,WAAA7C,GAAAW,MAAA,GAAAC,KAAAC,GAAAA,EAAAG,QAC4B,EAG1DW,EAAAC,IAAA,CAA8CJ,MAAA,IAAAsB,EAAA,GAAA,GAAA,EAAA,CACW,CACrDC,OAAA,EACUvB,MAAAI,EAAA,IAEV,CACAmB,OAAA,EACUvB,MAAAI,EAAA,QAcdjC,IAAAqD,WAAA,KACE,MAAA/C,OAAAA,GAAAR,EACAwD,EAAA,CAAsCC,OAAA,CAC5B,IACNC,EAAAlD,GAC4BS,KAAAT,EAAAC,gBAAAF,SAAAW,MAAA,GAAAC,KAAAC,GAAAA,EAAAG,UAG9BoC,QAAA,CACS,CACPC,KAAApD,EAAAmD,QACeE,QAAA,SAGjB/C,MAAA,GACQqC,OAAA,IAGVhD,EAAAkB,MAAAyC,EAAAN,EAAAvD,GAAAoB,MAEAnB,IAAA6D,OAAA,IAAA/D,EAAAQ,SACc,CAAAwD,EAAAC,EAAA,MAEV,MAAAC,EAAA/D,EAAAkB,OAAA8C,YACAC,EAAAC,EAAAL,EAAAC,GACAK,EAAAF,EAAAF,EAAAF,GACAI,EAAA,aACEF,EAAAP,QAAA,GAAAC,KAAAI,EAAAL,SApCRY,EAAAf,EAAAgB,KACE,MAAAvD,EAAAuD,IACAhB,EAAAL,OAAAlC,EAAAkC,OACAK,EAAA1C,MAAAG,EAAAH,MACA0C,EAAAC,OAAA,GAAA,IAAmBD,EAAAC,OAAA,GACAxC,KAAAA,EAAAmC,WACN,EAgCTmB,CAAAL,EAAA7D,GACAF,EAAAkB,MAAAoD,UAAAP,GAAA,EAAA,GACF,CACAQ,WAAA,GAEA,IAIJ,MAAAC,EAAAC,EAAA5E,EAAAG"}